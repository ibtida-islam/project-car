{"ast":null,"code":"var _jsxFileName = \"D:\\\\Car Rental\\\\new_car\\\\src\\\\components\\\\UI\\\\CheckoutForm.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport \"../../styles/checkoutform.css\";\n\n// CheckoutForm component - handles Stripe payment processing\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CheckoutForm = ({\n  amount\n}) => {\n  _s();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [paymentMessage, setPaymentMessage] = useState(\"\");\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!stripe || !elements) {\n      return;\n    }\n    setIsProcessing(true);\n\n    // Simulate fetching a payment intent from your backend\n    const response = await fetch(\"http://localhost:5000/create-payment-intent\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        amount: parseFloat(amount) * 100\n      }) // Convert amount to cents\n    });\n    const {\n      clientSecret\n    } = await response.json();\n    const result = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n    if (result.error) {\n      setPaymentMessage(result.error.message);\n    } else if (result.paymentIntent.status === \"succeeded\") {\n      setPaymentMessage(\"Payment successful!\");\n    }\n    setIsProcessing(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"checkout-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-element-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(CardElement, {\n        options: {\n          hidePostalCode: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"pay-button\",\n      disabled: !stripe || isProcessing,\n      children: isProcessing ? \"Processing...\" : \"Pay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 3\n    }, this), paymentMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: `payment-message ${paymentMessage.includes('error') ? 'error' : ''}`,\n      children: paymentMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 1\n  }, this);\n};\n\n// PaymentAmountForm component - asks user for the amount to be paid\n_s(CheckoutForm, \"jDzChPLx6rXiLL79uwD5rBcvZ0o=\", false, function () {\n  return [useStripe, useElements];\n});\n_c = CheckoutForm;\nconst PaymentAmountForm = ({\n  onAmountSubmit\n}) => {\n  _s2();\n  const [amount, setAmount] = useState(\"\");\n  const handleAmountChange = e => {\n    setAmount(e.target.value);\n  };\n  const handleSubmitAmount = e => {\n    e.preventDefault();\n    if (amount && !isNaN(amount) && parseFloat(amount) > 0) {\n      onAmountSubmit(amount); // Pass the amount to the parent\n    } else {\n      alert(\"Please enter a valid amount\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    class: \"payment-form\",\n    onSubmit: handleSubmitAmount,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: amount,\n      onChange: handleAmountChange,\n      placeholder: \"Enter amount\",\n      min: \"1\",\n      step: \"0.01\",\n      class: \"payment-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      class: \"payment-button\",\n      children: \"Proceed to Payment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n// PaymentMethod component - handles flow of entering amount and processing payment\n_s2(PaymentAmountForm, \"0ZPO5JxKq8uYzHSkldY7pAViR2E=\");\n_c2 = PaymentAmountForm;\nconst PaymentMethod = () => {\n  _s3();\n  const [amount, setAmount] = useState(null);\n  const handleAmountSubmit = amount => {\n    setAmount(amount); // Save amount when user submits\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: amount === null ? /*#__PURE__*/_jsxDEV(PaymentAmountForm, {\n      onAmountSubmit: handleAmountSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(CheckoutForm, {\n      amount: amount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s3(PaymentMethod, \"A8HIf6PhuapyhbdH9rKjSmnUD8A=\");\n_c3 = PaymentMethod;\nexport default PaymentMethod;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CheckoutForm\");\n$RefreshReg$(_c2, \"PaymentAmountForm\");\n$RefreshReg$(_c3, \"PaymentMethod\");","map":{"version":3,"names":["React","useState","CardElement","useStripe","useElements","jsxDEV","_jsxDEV","CheckoutForm","amount","_s","stripe","elements","isProcessing","setIsProcessing","paymentMessage","setPaymentMessage","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","parseFloat","clientSecret","json","result","confirmCardPayment","payment_method","card","getElement","error","message","paymentIntent","status","onSubmit","className","children","options","hidePostalCode","fileName","_jsxFileName","lineNumber","columnNumber","type","disabled","includes","_c","PaymentAmountForm","onAmountSubmit","_s2","setAmount","handleAmountChange","target","value","handleSubmitAmount","isNaN","alert","class","onChange","placeholder","min","step","_c2","PaymentMethod","_s3","handleAmountSubmit","_c3","$RefreshReg$"],"sources":["D:/Car Rental/new_car/src/components/UI/CheckoutForm.jsx"],"sourcesContent":["\r\nimport React, { useState } from \"react\";\r\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport \"../../styles/checkoutform.css\";\r\n\r\n// CheckoutForm component - handles Stripe payment processing\r\nconst CheckoutForm = ({ amount }) => {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [paymentMessage, setPaymentMessage] = useState(\"\");\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      return;\r\n    }\r\n\r\n    setIsProcessing(true);\r\n\r\n    // Simulate fetching a payment intent from your backend\r\n    const response = await fetch(\"http://localhost:5000/create-payment-intent\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ amount: parseFloat(amount) * 100 }), // Convert amount to cents\r\n    });\r\n\r\n    const { clientSecret } = await response.json();\r\n\r\n    const result = await stripe.confirmCardPayment(clientSecret, {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement),\r\n      },\r\n    });\r\n\r\n    if (result.error) {\r\n      setPaymentMessage(result.error.message);\r\n    } else if (result.paymentIntent.status === \"succeeded\") {\r\n      setPaymentMessage(\"Payment successful!\");\r\n    }\r\n\r\n    setIsProcessing(false);\r\n  };\r\n\r\n  return (\r\n\r\n<form onSubmit={handleSubmit} className=\"checkout-form\">\r\n  <div className=\"card-element-wrapper\">\r\n    <CardElement options={{ hidePostalCode: true }} />\r\n  </div>\r\n  <button type=\"submit\" className=\"pay-button\" disabled={!stripe || isProcessing}>\r\n    {isProcessing ? \"Processing...\" : \"Pay\"}\r\n  </button>\r\n  {paymentMessage && <p className={`payment-message ${paymentMessage.includes('error') ? 'error' : ''}`}>{paymentMessage}</p>}\r\n</form>\r\n\r\n\r\n    \r\n  );\r\n};\r\n\r\n// PaymentAmountForm component - asks user for the amount to be paid\r\nconst PaymentAmountForm = ({ onAmountSubmit }) => {\r\n  const [amount, setAmount] = useState(\"\");\r\n\r\n  const handleAmountChange = (e) => {\r\n    setAmount(e.target.value);\r\n  };\r\n\r\n  const handleSubmitAmount = (e) => {\r\n    e.preventDefault();\r\n    if (amount && !isNaN(amount) && parseFloat(amount) > 0) {\r\n      onAmountSubmit(amount); // Pass the amount to the parent\r\n    } else {\r\n      alert(\"Please enter a valid amount\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form class=\"payment-form\" onSubmit={handleSubmitAmount}>\r\n  <input\r\n    type=\"number\"\r\n    value={amount}\r\n    onChange={handleAmountChange}\r\n    placeholder=\"Enter amount\"\r\n    min=\"1\"\r\n    step=\"0.01\"\r\n    class=\"payment-input\"\r\n  />\r\n  <button type=\"submit\" class=\"payment-button\">Proceed to Payment</button>\r\n</form>\r\n\r\n  );\r\n};\r\n\r\n// PaymentMethod component - handles flow of entering amount and processing payment\r\nconst PaymentMethod = () => {\r\n  const [amount, setAmount] = useState(null);\r\n\r\n  const handleAmountSubmit = (amount) => {\r\n    setAmount(amount); // Save amount when user submits\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {amount === null ? (\r\n        <PaymentAmountForm onAmountSubmit={handleAmountSubmit} />\r\n      ) : (\r\n        <CheckoutForm amount={amount} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaymentMethod;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}